/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Seafoam (https://sketchfab.com/seafoam)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/smol-holomyth-halloween-costumes-1e2305d63e084c1e966630496b6deb5b
Title: Smol HoloMyth Halloween Costumes!
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

import smolHolo from "../3d/smol_holomyth_halloween_costumes.glb";

const SmolHoloMyth = ({ isRotating, setIsRotating, ...props }) => {
  const mythRef = useRef();

  const { gl, viewport } = useThree();

  const { nodes, materials } = useGLTF(smolHolo);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    lastX.current = clientX;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      mythRef.current.rotation.y += delta * 0.01 * Math.PI;

      lastX.current = clientX;

      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      mythRef.current.rotation.y += 0.01 * Math.PI;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      mythRef.current.rotation.y -= 0.01 * Math.PI;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }
    } else {
      const rotation = mythRef.current.rotation.y;
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  return (
    <a.group ref={mythRef} {...props}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.393}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <primitive object={nodes._rootJoint} />
            <skinnedMesh
              geometry={nodes.Object_76.geometry}
              material={materials.outline}
              skeleton={nodes.Object_76.skeleton}
            />
            <skinnedMesh
              geometry={nodes.Object_77.geometry}
              material={materials.Hw_smolametex}
              skeleton={nodes.Object_77.skeleton}
            />
          </group>
          <group
            position={[-490.602, 0, 0]}
            rotation={[-Math.PI / 2, 0, 0.463]}
            scale={100}
          >
            <primitive object={nodes._rootJoint_1} />
            <skinnedMesh
              geometry={nodes.Object_152.geometry}
              material={materials.HWSmolCalli}
              skeleton={nodes.Object_152.skeleton}
            />
            <skinnedMesh
              geometry={nodes.Object_153.geometry}
              material={materials.outline}
              skeleton={nodes.Object_153.skeleton}
            />
            <skinnedMesh
              geometry={nodes.Object_154.geometry}
              material={materials.SmolCalliVeil}
              skeleton={nodes.Object_154.skeleton}
            />
          </group>
          <group
            position={[440.422, 0, 0]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes._rootJoint_2} />
            <skinnedMesh
              geometry={nodes.Object_236.geometry}
              material={materials.SmolGura}
              skeleton={nodes.Object_236.skeleton}
            />
            <skinnedMesh
              geometry={nodes.Object_237.geometry}
              material={materials.outline}
              skeleton={nodes.Object_237.skeleton}
            />
          </group>
          <group
            position={[227.99, 0, 0]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes._rootJoint_3} />
            <skinnedMesh
              geometry={nodes.Object_317.geometry}
              material={materials.HW_SmolIna}
              skeleton={nodes.Object_317.skeleton}
            />
            <skinnedMesh
              geometry={nodes.Object_318.geometry}
              material={materials.outline}
              skeleton={nodes.Object_318.skeleton}
            />
          </group>
          <group
            position={[-245.133, 0, 0]}
            rotation={[-Math.PI / 2, 0, 0.177]}
            scale={100}
          >
            <primitive object={nodes._rootJoint_4} />
            <skinnedMesh
              geometry={nodes.Object_394.geometry}
              material={materials.HW_smolkiara}
              skeleton={nodes.Object_394.skeleton}
            />
            <skinnedMesh
              geometry={nodes.Object_395.geometry}
              material={materials.outline}
              skeleton={nodes.Object_395.skeleton}
            />
          </group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Kiara_parasol_HW_smolkiara_0.geometry}
            material={materials.HW_smolkiara}
            position={[-217.027, 87.621, 52.924]}
            rotation={[-2.318, -0.571, -0.62]}
            scale={[110.45, 110.464, 118.507]}
          />
        </group>
      </group>
    </a.group>
  );
};

// useGLTF.preload("/smol_holomyth_halloween_costumes.glb");

export default SmolHoloMyth;
